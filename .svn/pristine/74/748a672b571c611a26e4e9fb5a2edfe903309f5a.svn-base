package cn.com.cdboost.charge.webapi.controller;

import cn.com.cdboost.charge.base.aop.SystemControllerLog;
import cn.com.cdboost.charge.base.constant.UserInfoKey;
import cn.com.cdboost.charge.base.util.DateUtil;
import cn.com.cdboost.charge.base.vo.ApiResult;
import cn.com.cdboost.charge.base.vo.PageData;
import cn.com.cdboost.charge.merchant.vo.info.ChargingDeviceVo;
import cn.com.cdboost.charge.user.dto.info.UserLoginInfo;
import cn.com.cdboost.charge.webapi.dto.Device;
import cn.com.cdboost.charge.webapi.dto.param.ChargerDeviceAddWebParam;
import cn.com.cdboost.charge.webapi.dto.param.ChargerDeviceEditWebParam;
import cn.com.cdboost.charge.webapi.dto.param.ChargerDeviceQueryWebParam;
import cn.com.cdboost.charge.webapi.service.GenerateFileServiceWrapper;
import cn.com.cdboost.charge.webapi.service.WebChargingWrapper;
import cn.com.cdboost.charge.webapi.util.DownLoadUtil;
import com.alibaba.fastjson.JSON;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.web.bind.annotation.*;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.IOException;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

/**
 * 充电控制类
 */
@Api(value ="充电设备管理",tags = "充电设备管理相关接口")
@RestController
@Slf4j
@RequestMapping(value = "/api/webapi/v1/charger")

public class ChargerController {

    @Autowired
    WebChargingWrapper webChargingWrapper;
    @Autowired
    GenerateFileServiceWrapper generateFileServiceWrapper;

    @Autowired
    private RedisTemplate redisTemplate;
    @Value(value = "${callback.url}")
    private String host;


    
    /**
     * 充电设备列表查询
     * @param
     * @return
     */
    @SystemControllerLog(description = "充电设备列表查询")
    @GetMapping(value = "/deviceList")
    @ApiOperation(value="充电设备列表查询")
    @ApiParam(name = "queryVo",value = "充电设备列表查询入参",required = true)
    public String deviceList(HttpServletRequest request, @RequestBody ChargerDeviceQueryWebParam chargerDeviceQueryWebParam){

        ApiResult<PageData<ChargingDeviceVo>> ApiResult=new ApiResult();
        String md5Token = (String)request.getAttribute("md5Token");
        Map entries = redisTemplate.opsForHash().entries(md5Token);
        String userId = (String) entries.get(UserInfoKey.USER_GUID);
        //查询数据库
        List<ChargingDeviceVo> chargingDevices = webChargingWrapper.deviceList(chargerDeviceQueryWebParam, Integer.valueOf(userId));
        PageData pageData=new PageData();
        pageData.setList(chargingDevices);
        pageData.setTotal(chargerDeviceQueryWebParam.getTotal());
        ApiResult.setData(pageData);
        return JSON.toJSONString(ApiResult);
    }
    /**
     * 充电设备列表下载
     * @param
     * @return
     */
    @SystemControllerLog(description = "充电设备列表下载")
    @GetMapping(value = "/deviceListDown")
    @ApiOperation(value="充电设备列表下载")
    @ApiParam(name = "queryVo",value = "充电设备列表下载入参",required = true)
    public void deviceListDown(HttpServletRequest request, HttpServletResponse response, ChargerDeviceQueryWebParam chargerDeviceQueryWebParam){
        String md5Token = (String)request.getAttribute("md5Token");
        Map entries = redisTemplate.opsForHash().entries(md5Token);
        String userId = (String) entries.get(UserInfoKey.USER_GUID);
        //查询数据库
        List<ChargingDeviceVo> chargingDevices = webChargingWrapper.deviceList(chargerDeviceQueryWebParam, Integer.valueOf(userId));
        try {
            XSSFWorkbook workBook = generateFileServiceWrapper.generateChargingDeviceListExcel("充电桩列表",chargingDevices);
            DownLoadUtil.downExcel(response,workBook);
        } catch (Exception e) {
            String message = "充电桩列表";
            log.error(message,e);
        }
    }
    /**
     * 添加充电设备
     * @param
     * @return
     */

    @SystemControllerLog(description = "添加充电设备")
    @PostMapping(value = "/addDevice")
    @ApiOperation(value="充电设备添加")
    @ApiParam(name = "param",value = "充电设备添加入参",required = true)
    public String addDevice(HttpServletRequest request, @Valid @RequestBody ChargerDeviceAddWebParam chargerDeviceAddWebParam){
        ApiResult ApiResult=new ApiResult();
        String md5Token = (String)request.getAttribute("md5Token");
        Map entries = redisTemplate.opsForHash().entries(md5Token);
        UserLoginInfo userLoginInfo = (UserLoginInfo) entries.get(UserInfoKey.USER_GUID);
        Device device = new Device();
        BeanUtils.copyProperties(chargerDeviceAddWebParam,device);
        device.setInstallDate(DateUtil.parseDate(chargerDeviceAddWebParam.getInstallDate()));
        //调用业务层
        webChargingWrapper.addDevice(device, Integer.valueOf(userLoginInfo.getUserId()));

        //添加ic卡下发表
        webChargingWrapper.addCardList(device);
       /* userLogService.create(currentUser.getId(), Action.ADD.getActionId(), "充电桩设备", "充电桩设备编号", param.getDeviceNo(),"新增["+param.getDeviceNo()+"]充电桩设备",JSON.toJSONString(param));*/
        ApiResult.setMessage("添加成功！");
        return JSON.toJSONString(ApiResult);
    }
    /**
     * 删除充电设备
     * @param deviceNos
     * @return
     */
    @SystemControllerLog(description = "删除充电设备")
    @DeleteMapping(value = "/deleteDevice")
    @ApiOperation(value="删除充电设备")
    @ApiParam(name = "deviceNos/{deviceNos}",value = "删除充电设备入参",required = true)
    public String deleteDevice(HttpServletRequest request, @RequestBody List<String> deviceNos){
        ApiResult ApiResult=new ApiResult();
        String md5Token = (String)request.getAttribute("md5Token");
        Map entries = redisTemplate.opsForHash().entries(md5Token);
        UserLoginInfo userLoginInfo = (UserLoginInfo) entries.get(UserInfoKey.USER_GUID);
        //调用业务层删除设备
        boolean flag = webChargingWrapper.deleteDevice(deviceNos, Integer.valueOf(userLoginInfo.getUserId()));
        if (flag){
            ApiResult.setMessage("删除成功");
          /*  userLogService.create(currentUser.getId(), Action.DELETE.getActionId(), "充电桩设备", "充电桩设备编号", "","删除["+deviceNos.toString()+"]充电桩设备",JSON.toJSONString(deviceNos));*/
        } else {
            ApiResult.error("删除失败");
        }
        webChargingWrapper.deleteCardList(deviceNos);
        return JSON.toJSONString(ApiResult);
    }
    /**
     * 充电设备详情---基础信息
     * @param deviceNo
     * @return
     */
    @SystemControllerLog(description = "充电设备详情---基础信息")
    @GetMapping(value = "/deviceDetial/{deviceNo}")
    @ApiOperation(value="充电设备详情---基础信息")
    @ApiParam(name = "deviceNo",value = "充电设备详情---基础信息入参",required = true)
    public String deviceDetial(@PathVariable String deviceNo){
        ApiResult ApiResult=new ApiResult();
        //查询数据库
        ChargingDeviceVo chargingDeviceDto = webChargingWrapper.queryDeviceDetial(deviceNo);
        ApiResult.setData(chargingDeviceDto);
        return JSON.toJSONString(ApiResult);
    }


    /**
     * 生成设备二维码
     * @param res
     * @param deviceNo
     * @throws IOException
     */
    @SystemControllerLog(description = "生成设备二维码")
    @RequestMapping(value = "/getQ")
    public void getqcode(HttpServletResponse res,String deviceNo,String port) throws IOException {
        String format = "png";
        String content = host+"/chargePay/index.html?deviceNo="+deviceNo+port;

        int width = 150;//图片的宽度
        int height = 150;//高度

        if(content != null && !"".equals(content)){
            ServletOutputStream stream = null;
            try {
                Hashtable hints = new Hashtable();
                //内容所使用编码
                hints.put(EncodeHintType.CHARACTER_SET, "utf-8");
                hints.put(EncodeHintType.MARGIN, 3);
                //生成二维码
                stream = res.getOutputStream();
                BitMatrix bitMatrix = new QRCodeWriter().encode(content, BarcodeFormat.QR_CODE, width, height , hints);
                MatrixToImageWriter.writeToStream(bitMatrix, format, stream);
            } catch (WriterException e) {
                e.printStackTrace();
            }finally{
                if(stream != null){
                    stream.flush();
                    stream.close();
                }
            }

        }
    }

    /**
     * 编辑充电设备
     * @param param
     * @return
     */
    @SystemControllerLog(description = "编辑充电设备")
    @PostMapping(value = "/editDevice")
    public String editDevice(HttpServletRequest request, @RequestBody ChargerDeviceEditWebParam param){
        ApiResult ApiResult=new ApiResult();
        String md5Token = (String)request.getAttribute("md5Token");
        Map entries = redisTemplate.opsForHash().entries(md5Token);
        String userId = (String) entries.get(UserInfoKey.USER_GUID);
        Device chargingDevice = new Device();
        BeanUtils.copyProperties(param,chargingDevice);

        chargingDevice.setInstallDate(DateUtil.parseDate(param.getInstallDate()));

        //查询修改前所属的项目
        ChargingDeviceVo chargingDevice1 = webChargingWrapper.queryByChargingPlieGuid(param.getChargingPlieGuid());
        //调用业务层
        boolean flag = webChargingWrapper.editDevice(chargingDevice, Integer.valueOf(userId));
        if (flag){
            ApiResult.setMessage("修改成功");
            /*userLogService.create(currentUser.getId(), Action.MODIFY.getActionId(), "充电桩设备", "chargingPlieGuid", String.valueOf(param.getChargingPlieGuid()),"修改充电桩设备["+param.getDeviceNo()+"]信息", JSON.toJSONString(param));*/
        } else {
            ApiResult.error("修改失败");
        }
        if (!chargingDevice1.getProjectGuid().equals(param.getProjectGuid())){
            //修改cardlist
            webChargingWrapper.editCardList(chargingDevice,chargingDevice1.getProjectGuid());
            if (chargingDevice.getResult() == 1){
                ApiResult.setMessage("修改成功！");
            }else if (chargingDevice.getResult() == 0){
                ApiResult.setMessage("修改ic卡下发表失败！");
            }
        }
        return JSON.toJSONString(ApiResult);
    }


    /**
     * 停用(启用)充电桩
     * @param offOnChargeVo
     * @return
     */
    /*@SystemControllerLog(description = "停用(启用)充电桩")
    @RequestMapping(value = "/offOn")
    @ResponseBody
    public String offOn(HttpSession session, @RequestBody OffOnChargeVo offOnChargeVo){
        ApiResult ApiResult=new ApiResult("操作成功");
        LoginUser currentUser = (LoginUser)session.getAttribute(GlobalConstant.CURRENT_LOGIN_USER);
        //停止充电操作
        offOnChargeVo.setSessionId(session.getId());
        chargingDeviceService.offOnCharge(offOnChargeVo);
        if (offOnChargeVo.getOnOrOff() == 0){
            userLogService.create(currentUser.getId(), Action.MODIFY.getActionId(), "充电桩设备端口", "commNo+port", offOnChargeVo.getCommNo()+offOnChargeVo.getPort(),"停用充电桩设备["+offOnChargeVo.getCommNo()+"-"+offOnChargeVo.getPort()+"]信息", JSON.toJSONString(offOnChargeVo));
        }else if (offOnChargeVo.getOnOrOff() == 1){
            userLogService.create(currentUser.getId(), Action.MODIFY.getActionId(), "充电桩设备端口", "commNo+port", offOnChargeVo.getCommNo()+offOnChargeVo.getPort(),"启用充电桩设备["+offOnChargeVo.getCommNo()+"-"+offOnChargeVo.getPort()+"]信息", JSON.toJSONString(offOnChargeVo));
        }else if (offOnChargeVo.getOnOrOff() == -1){
            userLogService.create(currentUser.getId(), Action.MODIFY.getActionId(), "充电桩设备端口", "commNo+port", offOnChargeVo.getCommNo()+offOnChargeVo.getPort(),"停充设备["+offOnChargeVo.getCommNo()+"-"+offOnChargeVo.getPort()+"]信息", JSON.toJSONString(offOnChargeVo));
        }
        return JSON.toJSONString(ApiResult);
    }*/

}
