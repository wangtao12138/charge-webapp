package cn.com.cdboost.charge.webapi.controller;


import cn.com.cdboost.charge.base.aop.SystemControllerLog;
import cn.com.cdboost.charge.base.constant.UserInfoKey;
import cn.com.cdboost.charge.base.vo.ApiResult;
import cn.com.cdboost.charge.user.dto.info.MenuInfo;
import cn.com.cdboost.charge.user.dto.info.MenuTreeInfo;
import cn.com.cdboost.charge.user.dto.info.RoleRightInfo;
import cn.com.cdboost.charge.user.dubbo.MenuService;
import cn.com.cdboost.charge.user.dubbo.RoleService;
import cn.com.cdboost.charge.user.vo.TreeParser;
import com.alibaba.dubbo.config.annotation.Reference;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import jdk.nashorn.internal.objects.annotations.Getter;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.*;

@RestController
@Api(value ="导航菜单",tags = "导航菜单相关接口")
@RequestMapping("/api/webapi/v1/menuAction")
public class MenuActionController {


	@Reference(version = "1.0")
	private RoleService roleService;

	@Autowired
	private RedisTemplate redisTemplate;

	@Reference(version = "1.0")
	private MenuService menuService;
	/**
	 * 根据菜单id，查询对应角色下拥有的动作信息
	 * @param
	 * @param menuId
	 * @return
	 */
	@SystemControllerLog(description = "根据菜单id，查询对应角色下拥有的动作信息")
	@GetMapping("/RolePermissions/{menuId}")
	@ApiOperation(value="根据菜单id，查询对应角色下拥有的动作信息", notes="查询对应角色下拥有的动作信息")
	public ApiResult queryRolePermissions(HttpServletRequest request, @PathVariable Long menuId) {
		ApiResult<List<RoleRightInfo>> result = new ApiResult<>();
		String md5Token = (String)request.getAttribute("md5Token");
		Map entries = redisTemplate.opsForHash().entries(md5Token);
		Integer roleId = (Integer) entries.get(UserInfoKey.USER_ROLEID);

		List<RoleRightInfo> rolePermissions = roleService.queryRolePermissions(menuId,roleId);
		result.setData(rolePermissions);

		return result;
	}
	// 根据用户角色，查询用户拥有的菜单信息
	@SystemControllerLog(description = "根据用户角色，查询用户拥有的菜单信息")
	@GetMapping(value = "MenusByUserRole" )
	@ApiOperation(value="根据用户角色，查询用户拥有的菜单信息", notes="根据用户角色，查询用户拥有的菜单信息")
	public ApiResult queryMenusByUserRole(HttpServletRequest request,HttpSession session) {
		ApiResult<List<MenuTreeInfo>> result = new ApiResult<>();
		String md5Token = (String)request.getAttribute("md5Token");
		Map entries = redisTemplate.opsForHash().entries(md5Token);
		Integer roleId = (Integer) entries.get(UserInfoKey.USER_ROLEID);

		List<RoleRightInfo> roleRights = roleService.queryRolePermissionsByRoleId(roleId);
		if (CollectionUtils.isEmpty(roleRights)) {
			List<MenuTreeInfo> emptyList = Lists.newArrayList();
			result.setData(emptyList);
			return result;
		}

		Set<Long> menuIdSet = Sets.newHashSet();
		for (RoleRightInfo roleRight : roleRights) {
			menuIdSet.add(roleRight.getMenuId());
		}

		// 子菜单批量查询
		List<MenuInfo> menuCacheVos = menuService.queryMenusByMenuIds(new ArrayList<>(menuIdSet) );
		Set<Long> all = Sets.newHashSet();
		for (MenuInfo menuCacheVo : menuCacheVos) {
			String levelCode = menuCacheVo.getLevelCode();
			// 去掉第一个斜杠
			String tempStr = levelCode.substring(1);
			String[] split = tempStr.split("/");
			for (String menuId : split) {
				all.add(Long.valueOf(menuId));
			}
		}

		// 查询所有菜单
		List<MenuInfo> allMenus = menuService.queryMenusByMenuIds(new ArrayList<>(all));

		// 排序
		Collections.sort(allMenus, Comparator.comparingInt(MenuInfo::getSortNo));

		// 转换成前端需要的值
		List<MenuTreeInfo> menuTreeInfos = Lists.newArrayList();
		for (MenuInfo cacheVo : allMenus) {
			MenuTreeInfo info = new MenuTreeInfo();
			BeanUtils.copyProperties(cacheVo,info);
			info.setParentMenuId(cacheVo.getPMenuId());
			menuTreeInfos.add(info);
		}

		// 按树形层级返回
		List<MenuTreeInfo> treeList = TreeParser.getTreeList(0L, menuTreeInfos);
		result.setData(treeList);

		return result;
	}
}
